/*! For license information please see vendors-node_modules_mermaid_dist_gitGraphDiagram-1e960c50_js.js.LICENSE.txt */
"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([["vendors-node_modules_mermaid_dist_gitGraphDiagram-1e960c50_js"],{"./node_modules/mermaid/dist/gitGraphDiagram-1e960c50.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diagram: () => (/* binding */ diagram)\n/* harmony export */ });\n/* harmony import */ var _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mermaid-b0ad2de1.js */ "./node_modules/mermaid/dist/mermaid-b0ad2de1.js");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/mermaid/node_modules/d3/src/index.js");\n/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ts-dedent */ "./node_modules/ts-dedent/esm/index.js");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @braintree/sanitize-url */ "./node_modules/@braintree/sanitize-url/dist/index.js");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js");\n\n\n\n\n\n\n\n\n\n\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [1, 4], $V1 = [1, 7], $V2 = [1, 5], $V3 = [1, 9], $V4 = [1, 6], $V5 = [2, 6], $V6 = [1, 16], $V7 = [6, 8, 14, 20, 22, 24, 25, 27, 29, 32, 37, 40, 50, 55], $V8 = [8, 14, 20, 22, 24, 25, 27, 29, 32, 37, 40], $V9 = [8, 13, 14, 20, 22, 24, 25, 27, 29, 32, 37, 40], $Va = [1, 26], $Vb = [6, 8, 14, 50, 55], $Vc = [8, 14, 55], $Vd = [1, 53], $Ve = [1, 52], $Vf = [8, 14, 30, 33, 35, 38, 55], $Vg = [1, 67], $Vh = [1, 68], $Vi = [1, 69], $Vj = [8, 14, 33, 35, 42, 55];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { "error": 2, "start": 3, "eol": 4, "directive": 5, "GG": 6, "document": 7, "EOF": 8, ":": 9, "DIR": 10, "options": 11, "body": 12, "OPT": 13, "NL": 14, "line": 15, "statement": 16, "commitStatement": 17, "mergeStatement": 18, "cherryPickStatement": 19, "acc_title": 20, "acc_title_value": 21, "acc_descr": 22, "acc_descr_value": 23, "acc_descr_multiline_value": 24, "section": 25, "branchStatement": 26, "CHECKOUT": 27, "ref": 28, "BRANCH": 29, "ORDER": 30, "NUM": 31, "CHERRY_PICK": 32, "COMMIT_ID": 33, "STR": 34, "COMMIT_TAG": 35, "EMPTYSTR": 36, "MERGE": 37, "COMMIT_TYPE": 38, "commitType": 39, "COMMIT": 40, "commit_arg": 41, "COMMIT_MSG": 42, "NORMAL": 43, "REVERSE": 44, "HIGHLIGHT": 45, "openDirective": 46, "typeDirective": 47, "closeDirective": 48, "argDirective": 49, "open_directive": 50, "type_directive": 51, "arg_directive": 52, "close_directive": 53, "ID": 54, ";": 55, "$accept": 0, "$end": 1 },\n    terminals_: { 2: "error", 6: "GG", 8: "EOF", 9: ":", 10: "DIR", 13: "OPT", 14: "NL", 20: "acc_title", 21: "acc_title_value", 22: "acc_descr", 23: "acc_descr_value", 24: "acc_descr_multiline_value", 25: "section", 27: "CHECKOUT", 29: "BRANCH", 30: "ORDER", 31: "NUM", 32: "CHERRY_PICK", 33: "COMMIT_ID", 34: "STR", 35: "COMMIT_TAG", 36: "EMPTYSTR", 37: "MERGE", 38: "COMMIT_TYPE", 40: "COMMIT", 42: "COMMIT_MSG", 43: "NORMAL", 44: "REVERSE", 45: "HIGHLIGHT", 50: "open_directive", 51: "type_directive", 52: "arg_directive", 53: "close_directive", 54: "ID", 55: ";" },\n    productions_: [0, [3, 2], [3, 2], [3, 3], [3, 4], [3, 5], [7, 0], [7, 2], [11, 2], [11, 1], [12, 0], [12, 2], [15, 2], [15, 1], [16, 1], [16, 1], [16, 1], [16, 2], [16, 2], [16, 1], [16, 1], [16, 1], [16, 2], [26, 2], [26, 4], [19, 3], [19, 5], [19, 5], [19, 5], [19, 5], [18, 2], [18, 4], [18, 4], [18, 4], [18, 6], [18, 6], [18, 6], [18, 6], [18, 6], [18, 6], [18, 8], [18, 8], [18, 8], [18, 8], [18, 8], [18, 8], [17, 2], [17, 3], [17, 3], [17, 5], [17, 5], [17, 3], [17, 5], [17, 5], [17, 5], [17, 5], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 3], [17, 5], [17, 5], [17, 5], [17, 5], [17, 5], [17, 5], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 7], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [17, 9], [41, 0], [41, 1], [39, 1], [39, 1], [39, 1], [5, 3], [5, 5], [46, 1], [47, 1], [49, 1], [48, 1], [28, 1], [28, 1], [4, 1], [4, 1], [4, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 3:\n          return $$[$0];\n        case 4:\n          return $$[$0 - 1];\n        case 5:\n          yy.setDirection($$[$0 - 3]);\n          return $$[$0 - 1];\n        case 7:\n          yy.setOptions($$[$0 - 1]);\n          this.$ = $$[$0];\n          break;\n        case 8:\n          $$[$0 - 1] += $$[$0];\n          this.$ = $$[$0 - 1];\n          break;\n        case 10:\n          this.$ = [];\n          break;\n        case 11:\n          $$[$0 - 1].push($$[$0]);\n          this.$ = $$[$0 - 1];\n          break;\n        case 12:\n          this.$ = $$[$0 - 1];\n          break;\n        case 17:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 18:\n        case 19:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 20:\n          yy.addSection($$[$0].substr(8));\n          this.$ = $$[$0].substr(8);\n          break;\n        case 22:\n          yy.checkout($$[$0]);\n          break;\n        case 23:\n          yy.branch($$[$0]);\n          break;\n        case 24:\n          yy.branch($$[$0 - 2], $$[$0]);\n          break;\n        case 25:\n          yy.cherryPick($$[$0], "", void 0);\n          break;\n        case 26:\n          yy.cherryPick($$[$0 - 2], "", $$[$0]);\n          break;\n        case 27:\n        case 29:\n          yy.cherryPick($$[$0 - 2], "", "");\n          break;\n        case 28:\n          yy.cherryPick($$[$0], "", $$[$0 - 2]);\n          break;\n        case 30:\n          yy.merge($$[$0], "", "", "");\n          break;\n        case 31:\n          yy.merge($$[$0 - 2], $$[$0], "", "");\n          break;\n        case 32:\n          yy.merge($$[$0 - 2], "", $$[$0], "");\n          break;\n        case 33:\n          yy.merge($$[$0 - 2], "", "", $$[$0]);\n          break;\n        case 34:\n          yy.merge($$[$0 - 4], $$[$0], "", $$[$0 - 2]);\n          break;\n        case 35:\n          yy.merge($$[$0 - 4], "", $$[$0], $$[$0 - 2]);\n          break;\n        case 36:\n          yy.merge($$[$0 - 4], "", $$[$0 - 2], $$[$0]);\n          break;\n        case 37:\n          yy.merge($$[$0 - 4], $$[$0 - 2], $$[$0], "");\n          break;\n        case 38:\n          yy.merge($$[$0 - 4], $$[$0 - 2], "", $$[$0]);\n          break;\n        case 39:\n          yy.merge($$[$0 - 4], $$[$0], $$[$0 - 2], "");\n          break;\n        case 40:\n          yy.merge($$[$0 - 6], $$[$0 - 4], $$[$0 - 2], $$[$0]);\n          break;\n        case 41:\n          yy.merge($$[$0 - 6], $$[$0], $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 42:\n          yy.merge($$[$0 - 6], $$[$0 - 4], $$[$0], $$[$0 - 2]);\n          break;\n        case 43:\n          yy.merge($$[$0 - 6], $$[$0 - 2], $$[$0 - 4], $$[$0]);\n          break;\n        case 44:\n          yy.merge($$[$0 - 6], $$[$0], $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 45:\n          yy.merge($$[$0 - 6], $$[$0 - 2], $$[$0], $$[$0 - 4]);\n          break;\n        case 46:\n          yy.commit($$[$0]);\n          break;\n        case 47:\n          yy.commit("", "", yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 48:\n          yy.commit("", "", $$[$0], "");\n          break;\n        case 49:\n          yy.commit("", "", $$[$0], $$[$0 - 2]);\n          break;\n        case 50:\n          yy.commit("", "", $$[$0 - 2], $$[$0]);\n          break;\n        case 51:\n          yy.commit("", $$[$0], yy.commitType.NORMAL, "");\n          break;\n        case 52:\n          yy.commit("", $$[$0 - 2], yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 53:\n          yy.commit("", $$[$0], yy.commitType.NORMAL, $$[$0 - 2]);\n          break;\n        case 54:\n          yy.commit("", $$[$0 - 2], $$[$0], "");\n          break;\n        case 55:\n          yy.commit("", $$[$0], $$[$0 - 2], "");\n          break;\n        case 56:\n          yy.commit("", $$[$0 - 4], $$[$0 - 2], $$[$0]);\n          break;\n        case 57:\n          yy.commit("", $$[$0 - 4], $$[$0], $$[$0 - 2]);\n          break;\n        case 58:\n          yy.commit("", $$[$0 - 2], $$[$0 - 4], $$[$0]);\n          break;\n        case 59:\n          yy.commit("", $$[$0], $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 60:\n          yy.commit("", $$[$0], $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 61:\n          yy.commit("", $$[$0 - 2], $$[$0], $$[$0 - 4]);\n          break;\n        case 62:\n          yy.commit($$[$0], "", yy.commitType.NORMAL, "");\n          break;\n        case 63:\n          yy.commit($$[$0], "", yy.commitType.NORMAL, $$[$0 - 2]);\n          break;\n        case 64:\n          yy.commit($$[$0 - 2], "", yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 65:\n          yy.commit($$[$0 - 2], "", $$[$0], "");\n          break;\n        case 66:\n          yy.commit($$[$0], "", $$[$0 - 2], "");\n          break;\n        case 67:\n          yy.commit($$[$0], $$[$0 - 2], yy.commitType.NORMAL, "");\n          break;\n        case 68:\n          yy.commit($$[$0 - 2], $$[$0], yy.commitType.NORMAL, "");\n          break;\n        case 69:\n          yy.commit($$[$0 - 4], "", $$[$0 - 2], $$[$0]);\n          break;\n        case 70:\n          yy.commit($$[$0 - 4], "", $$[$0], $$[$0 - 2]);\n          break;\n        case 71:\n          yy.commit($$[$0 - 2], "", $$[$0 - 4], $$[$0]);\n          break;\n        case 72:\n          yy.commit($$[$0], "", $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 73:\n          yy.commit($$[$0], "", $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 74:\n          yy.commit($$[$0 - 2], "", $$[$0], $$[$0 - 4]);\n          break;\n        case 75:\n          yy.commit($$[$0 - 4], $$[$0], $$[$0 - 2], "");\n          break;\n        case 76:\n          yy.commit($$[$0 - 4], $$[$0 - 2], $$[$0], "");\n          break;\n        case 77:\n          yy.commit($$[$0 - 2], $$[$0], $$[$0 - 4], "");\n          break;\n        case 78:\n          yy.commit($$[$0], $$[$0 - 2], $$[$0 - 4], "");\n          break;\n        case 79:\n          yy.commit($$[$0], $$[$0 - 4], $$[$0 - 2], "");\n          break;\n        case 80:\n          yy.commit($$[$0 - 2], $$[$0 - 4], $$[$0], "");\n          break;\n        case 81:\n          yy.commit($$[$0 - 4], $$[$0], yy.commitType.NORMAL, $$[$0 - 2]);\n          break;\n        case 82:\n          yy.commit($$[$0 - 4], $$[$0 - 2], yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 83:\n          yy.commit($$[$0 - 2], $$[$0], yy.commitType.NORMAL, $$[$0 - 4]);\n          break;\n        case 84:\n          yy.commit($$[$0], $$[$0 - 2], yy.commitType.NORMAL, $$[$0 - 4]);\n          break;\n        case 85:\n          yy.commit($$[$0], $$[$0 - 4], yy.commitType.NORMAL, $$[$0 - 2]);\n          break;\n        case 86:\n          yy.commit($$[$0 - 2], $$[$0 - 4], yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 87:\n          yy.commit($$[$0 - 6], $$[$0 - 4], $$[$0 - 2], $$[$0]);\n          break;\n        case 88:\n          yy.commit($$[$0 - 6], $$[$0 - 4], $$[$0], $$[$0 - 2]);\n          break;\n        case 89:\n          yy.commit($$[$0 - 6], $$[$0 - 2], $$[$0 - 4], $$[$0]);\n          break;\n        case 90:\n          yy.commit($$[$0 - 6], $$[$0], $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 91:\n          yy.commit($$[$0 - 6], $$[$0 - 2], $$[$0], $$[$0 - 4]);\n          break;\n        case 92:\n          yy.commit($$[$0 - 6], $$[$0], $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 93:\n          yy.commit($$[$0 - 4], $$[$0 - 6], $$[$0 - 2], $$[$0]);\n          break;\n        case 94:\n          yy.commit($$[$0 - 4], $$[$0 - 6], $$[$0], $$[$0 - 2]);\n          break;\n        case 95:\n          yy.commit($$[$0 - 2], $$[$0 - 6], $$[$0 - 4], $$[$0]);\n          break;\n        case 96:\n          yy.commit($$[$0], $$[$0 - 6], $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 97:\n          yy.commit($$[$0 - 2], $$[$0 - 6], $$[$0], $$[$0 - 4]);\n          break;\n        case 98:\n          yy.commit($$[$0], $$[$0 - 6], $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 99:\n          yy.commit($$[$0], $$[$0 - 4], $$[$0 - 2], $$[$0 - 6]);\n          break;\n        case 100:\n          yy.commit($$[$0 - 2], $$[$0 - 4], $$[$0], $$[$0 - 6]);\n          break;\n        case 101:\n          yy.commit($$[$0], $$[$0 - 2], $$[$0 - 4], $$[$0 - 6]);\n          break;\n        case 102:\n          yy.commit($$[$0 - 2], $$[$0], $$[$0 - 4], $$[$0 - 6]);\n          break;\n        case 103:\n          yy.commit($$[$0 - 4], $$[$0 - 2], $$[$0], $$[$0 - 6]);\n          break;\n        case 104:\n          yy.commit($$[$0 - 4], $$[$0], $$[$0 - 2], $$[$0 - 6]);\n          break;\n        case 105:\n          yy.commit($$[$0 - 2], $$[$0 - 4], $$[$0 - 6], $$[$0]);\n          break;\n        case 106:\n          yy.commit($$[$0], $$[$0 - 4], $$[$0 - 6], $$[$0 - 2]);\n          break;\n        case 107:\n          yy.commit($$[$0 - 2], $$[$0], $$[$0 - 6], $$[$0 - 4]);\n          break;\n        case 108:\n          yy.commit($$[$0], $$[$0 - 2], $$[$0 - 6], $$[$0 - 4]);\n          break;\n        case 109:\n          yy.commit($$[$0 - 4], $$[$0 - 2], $$[$0 - 6], $$[$0]);\n          break;\n        case 110:\n          yy.commit($$[$0 - 4], $$[$0], $$[$0 - 6], $$[$0 - 2]);\n          break;\n        case 111:\n          this.$ = "";\n          break;\n        case 112:\n          this.$ = $$[$0];\n          break;\n        case 113:\n          this.$ = yy.commitType.NORMAL;\n          break;\n        case 114:\n          this.$ = yy.commitType.REVERSE;\n          break;\n        case 115:\n          this.$ = yy.commitType.HIGHLIGHT;\n          break;\n        case 118:\n          yy.parseDirective("%%{", "open_directive");\n          break;\n        case 119:\n          yy.parseDirective($$[$0], "type_directive");\n          break;\n        case 120:\n          $$[$0] = $$[$0].trim().replace(/\'/g, \'"\');\n          yy.parseDirective($$[$0], "arg_directive");\n          break;\n        case 121:\n          yy.parseDirective("}%%", "close_directive", "gitGraph");\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: 2, 5: 3, 6: $V0, 8: $V1, 14: $V2, 46: 8, 50: $V3, 55: $V4 }, { 1: [3] }, { 3: 10, 4: 2, 5: 3, 6: $V0, 8: $V1, 14: $V2, 46: 8, 50: $V3, 55: $V4 }, { 3: 11, 4: 2, 5: 3, 6: $V0, 8: $V1, 14: $V2, 46: 8, 50: $V3, 55: $V4 }, { 7: 12, 8: $V5, 9: [1, 13], 10: [1, 14], 11: 15, 14: $V6 }, o($V7, [2, 124]), o($V7, [2, 125]), o($V7, [2, 126]), { 47: 17, 51: [1, 18] }, { 51: [2, 118] }, { 1: [2, 1] }, { 1: [2, 2] }, { 8: [1, 19] }, { 7: 20, 8: $V5, 11: 15, 14: $V6 }, { 9: [1, 21] }, o($V8, [2, 10], { 12: 22, 13: [1, 23] }), o($V9, [2, 9]), { 9: [1, 25], 48: 24, 53: $Va }, o([9, 53], [2, 119]), { 1: [2, 3] }, { 8: [1, 27] }, { 7: 28, 8: $V5, 11: 15, 14: $V6 }, { 8: [2, 7], 14: [1, 31], 15: 29, 16: 30, 17: 32, 18: 33, 19: 34, 20: [1, 35], 22: [1, 36], 24: [1, 37], 25: [1, 38], 26: 39, 27: [1, 40], 29: [1, 44], 32: [1, 43], 37: [1, 42], 40: [1, 41] }, o($V9, [2, 8]), o($Vb, [2, 116]), { 49: 45, 52: [1, 46] }, o($Vb, [2, 121]), { 1: [2, 4] }, { 8: [1, 47] }, o($V8, [2, 11]), { 4: 48, 8: $V1, 14: $V2, 55: $V4 }, o($V8, [2, 13]), o($Vc, [2, 14]), o($Vc, [2, 15]), o($Vc, [2, 16]), { 21: [1, 49] }, { 23: [1, 50] }, o($Vc, [2, 19]), o($Vc, [2, 20]), o($Vc, [2, 21]), { 28: 51, 34: $Vd, 54: $Ve }, o($Vc, [2, 111], { 41: 54, 33: [1, 57], 34: [1, 59], 35: [1, 55], 38: [1, 56], 42: [1, 58] }), { 28: 60, 34: $Vd, 54: $Ve }, { 33: [1, 61], 35: [1, 62] }, { 28: 63, 34: $Vd, 54: $Ve }, { 48: 64, 53: $Va }, { 53: [2, 120] }, { 1: [2, 5] }, o($V8, [2, 12]), o($Vc, [2, 17]), o($Vc, [2, 18]), o($Vc, [2, 22]), o($Vf, [2, 122]), o($Vf, [2, 123]), o($Vc, [2, 46]), { 34: [1, 65] }, { 39: 66, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 70] }, { 34: [1, 71] }, o($Vc, [2, 112]), o($Vc, [2, 30], { 33: [1, 72], 35: [1, 74], 38: [1, 73] }), { 34: [1, 75] }, { 34: [1, 76], 36: [1, 77] }, o($Vc, [2, 23], { 30: [1, 78] }), o($Vb, [2, 117]), o($Vc, [2, 47], { 33: [1, 80], 38: [1, 79], 42: [1, 81] }), o($Vc, [2, 48], { 33: [1, 83], 35: [1, 82], 42: [1, 84] }), o($Vj, [2, 113]), o($Vj, [2, 114]), o($Vj, [2, 115]), o($Vc, [2, 51], { 35: [1, 85], 38: [1, 86], 42: [1, 87] }), o($Vc, [2, 62], { 33: [1, 90], 35: [1, 88], 38: [1, 89] }), { 34: [1, 91] }, { 39: 92, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 93] }, o($Vc, [2, 25], { 35: [1, 94] }), { 33: [1, 95] }, { 33: [1, 96] }, { 31: [1, 97] }, { 39: 98, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 99] }, { 34: [1, 100] }, { 34: [1, 101] }, { 34: [1, 102] }, { 34: [1, 103] }, { 34: [1, 104] }, { 39: 105, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 106] }, { 34: [1, 107] }, { 39: 108, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 109] }, o($Vc, [2, 31], { 35: [1, 111], 38: [1, 110] }), o($Vc, [2, 32], { 33: [1, 113], 35: [1, 112] }), o($Vc, [2, 33], { 33: [1, 114], 38: [1, 115] }), { 34: [1, 116], 36: [1, 117] }, { 34: [1, 118] }, { 34: [1, 119] }, o($Vc, [2, 24]), o($Vc, [2, 49], { 33: [1, 120], 42: [1, 121] }), o($Vc, [2, 53], { 38: [1, 122], 42: [1, 123] }), o($Vc, [2, 63], { 33: [1, 125], 38: [1, 124] }), o($Vc, [2, 50], { 33: [1, 126], 42: [1, 127] }), o($Vc, [2, 55], { 35: [1, 128], 42: [1, 129] }), o($Vc, [2, 66], { 33: [1, 131], 35: [1, 130] }), o($Vc, [2, 52], { 38: [1, 132], 42: [1, 133] }), o($Vc, [2, 54], { 35: [1, 134], 42: [1, 135] }), o($Vc, [2, 67], { 35: [1, 137], 38: [1, 136] }), o($Vc, [2, 64], { 33: [1, 139], 38: [1, 138] }), o($Vc, [2, 65], { 33: [1, 141], 35: [1, 140] }), o($Vc, [2, 68], { 35: [1, 143], 38: [1, 142] }), { 39: 144, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 145] }, { 34: [1, 146] }, { 34: [1, 147] }, { 34: [1, 148] }, { 39: 149, 43: $Vg, 44: $Vh, 45: $Vi }, o($Vc, [2, 26]), o($Vc, [2, 27]), o($Vc, [2, 28]), o($Vc, [2, 29]), { 34: [1, 150] }, { 34: [1, 151] }, { 39: 152, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 153] }, { 39: 154, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 155] }, { 34: [1, 156] }, { 34: [1, 157] }, { 34: [1, 158] }, { 34: [1, 159] }, { 34: [1, 160] }, { 34: [1, 161] }, { 39: 162, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 163] }, { 34: [1, 164] }, { 34: [1, 165] }, { 39: 166, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 167] }, { 39: 168, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 169] }, { 34: [1, 170] }, { 34: [1, 171] }, { 39: 172, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 173] }, o($Vc, [2, 37], { 35: [1, 174] }), o($Vc, [2, 38], { 38: [1, 175] }), o($Vc, [2, 36], { 33: [1, 176] }), o($Vc, [2, 39], { 35: [1, 177] }), o($Vc, [2, 34], { 38: [1, 178] }), o($Vc, [2, 35], { 33: [1, 179] }), o($Vc, [2, 60], { 42: [1, 180] }), o($Vc, [2, 73], { 33: [1, 181] }), o($Vc, [2, 61], { 42: [1, 182] }), o($Vc, [2, 84], { 38: [1, 183] }), o($Vc, [2, 74], { 33: [1, 184] }), o($Vc, [2, 83], { 38: [1, 185] }), o($Vc, [2, 59], { 42: [1, 186] }), o($Vc, [2, 72], { 33: [1, 187] }), o($Vc, [2, 58], { 42: [1, 188] }), o($Vc, [2, 78], { 35: [1, 189] }), o($Vc, [2, 71], { 33: [1, 190] }), o($Vc, [2, 77], { 35: [1, 191] }), o($Vc, [2, 57], { 42: [1, 192] }), o($Vc, [2, 85], { 38: [1, 193] }), o($Vc, [2, 56], { 42: [1, 194] }), o($Vc, [2, 79], { 35: [1, 195] }), o($Vc, [2, 80], { 35: [1, 196] }), o($Vc, [2, 86], { 38: [1, 197] }), o($Vc, [2, 70], { 33: [1, 198] }), o($Vc, [2, 81], { 38: [1, 199] }), o($Vc, [2, 69], { 33: [1, 200] }), o($Vc, [2, 75], { 35: [1, 201] }), o($Vc, [2, 76], { 35: [1, 202] }), o($Vc, [2, 82], { 38: [1, 203] }), { 34: [1, 204] }, { 39: 205, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 206] }, { 34: [1, 207] }, { 39: 208, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 209] }, { 34: [1, 210] }, { 34: [1, 211] }, { 34: [1, 212] }, { 39: 213, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 214] }, { 39: 215, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 216] }, { 34: [1, 217] }, { 34: [1, 218] }, { 34: [1, 219] }, { 34: [1, 220] }, { 34: [1, 221] }, { 34: [1, 222] }, { 39: 223, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 224] }, { 34: [1, 225] }, { 34: [1, 226] }, { 39: 227, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 228] }, { 39: 229, 43: $Vg, 44: $Vh, 45: $Vi }, { 34: [1, 230] }, { 34: [1, 231] }, { 34: [1, 232] }, { 39: 233, 43: $Vg, 44: $Vh, 45: $Vi }, o($Vc, [2, 40]), o($Vc, [2, 42]), o($Vc, [2, 41]), o($Vc, [2, 43]), o($Vc, [2, 45]), o($Vc, [2, 44]), o($Vc, [2, 101]), o($Vc, [2, 102]), o($Vc, [2, 99]), o($Vc, [2, 100]), o($Vc, [2, 104]), o($Vc, [2, 103]), o($Vc, [2, 108]), o($Vc, [2, 107]), o($Vc, [2, 106]), o($Vc, [2, 105]), o($Vc, [2, 110]), o($Vc, [2, 109]), o($Vc, [2, 98]), o($Vc, [2, 97]), o($Vc, [2, 96]), o($Vc, [2, 95]), o($Vc, [2, 93]), o($Vc, [2, 94]), o($Vc, [2, 92]), o($Vc, [2, 91]), o($Vc, [2, 90]), o($Vc, [2, 89]), o($Vc, [2, 87]), o($Vc, [2, 88])],\n    defaultActions: { 9: [2, 118], 10: [2, 1], 11: [2, 2], 19: [2, 3], 27: [2, 4], 46: [2, 120], 47: [2, 5] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == "undefined") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === "function") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== "number") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == "undefined") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === "undefined" || !action.length || !action[0]) {\n          var errStr = "";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push("\'" + this.terminals_[p] + "\'");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = "Parse error on line " + (yylineno + 1) + ":\\n" + lexer2.showPosition() + "\\nExpecting " + expected.join(", ") + ", got \'" + (this.terminals_[symbol] || symbol) + "\'";\n          } else {\n            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == EOF ? "end of input" : "\'" + (this.terminals_[symbol] || symbol) + "\'");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== "undefined") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = "";\n        this.conditionStack = ["INITIAL"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n" + this.showPosition(), {\n            text: "",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\\n/g, "");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\\n/g, "");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join("-");\n        return pre + this.upcomingInput() + "\\n" + c + "^";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = "";\n          this.match = "";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === "") {\n          return this.EOF;\n        } else {\n          return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\\n" + this.showPosition(), {\n            text: "",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions["INITIAL"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return "INITIAL";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { "case-insensitive": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            this.begin("open_directive");\n            return 50;\n          case 1:\n            this.begin("type_directive");\n            return 51;\n          case 2:\n            this.popState();\n            this.begin("arg_directive");\n            return 9;\n          case 3:\n            this.popState();\n            this.popState();\n            return 53;\n          case 4:\n            return 52;\n          case 5:\n            this.begin("acc_title");\n            return 20;\n          case 6:\n            this.popState();\n            return "acc_title_value";\n          case 7:\n            this.begin("acc_descr");\n            return 22;\n          case 8:\n            this.popState();\n            return "acc_descr_value";\n          case 9:\n            this.begin("acc_descr_multiline");\n            break;\n          case 10:\n            this.popState();\n            break;\n          case 11:\n            return "acc_descr_multiline_value";\n          case 12:\n            return 14;\n          case 13:\n            break;\n          case 14:\n            break;\n          case 15:\n            return 6;\n          case 16:\n            return 40;\n          case 17:\n            return 33;\n          case 18:\n            return 38;\n          case 19:\n            return 42;\n          case 20:\n            return 43;\n          case 21:\n            return 44;\n          case 22:\n            return 45;\n          case 23:\n            return 35;\n          case 24:\n            return 29;\n          case 25:\n            return 30;\n          case 26:\n            return 37;\n          case 27:\n            return 32;\n          case 28:\n            return 27;\n          case 29:\n            return 10;\n          case 30:\n            return 10;\n          case 31:\n            return 9;\n          case 32:\n            return "CARET";\n          case 33:\n            this.begin("options");\n            break;\n          case 34:\n            this.popState();\n            break;\n          case 35:\n            return 13;\n          case 36:\n            return 36;\n          case 37:\n            this.begin("string");\n            break;\n          case 38:\n            this.popState();\n            break;\n          case 39:\n            return 34;\n          case 40:\n            return 31;\n          case 41:\n            return 54;\n          case 42:\n            return 8;\n        }\n      },\n      rules: [/^(?:%%\\{)/i, /^(?:((?:(?!\\}%%)[^:.])*))/i, /^(?::)/i, /^(?:\\}%%)/i, /^(?:((?:(?!\\}%%).|\\n)*))/i, /^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:(\\r?\\n)+)/i, /^(?:#[^\\n]*)/i, /^(?:%[^\\n]*)/i, /^(?:gitGraph\\b)/i, /^(?:commit(?=\\s|$))/i, /^(?:id:)/i, /^(?:type:)/i, /^(?:msg:)/i, /^(?:NORMAL\\b)/i, /^(?:REVERSE\\b)/i, /^(?:HIGHLIGHT\\b)/i, /^(?:tag:)/i, /^(?:branch(?=\\s|$))/i, /^(?:order:)/i, /^(?:merge(?=\\s|$))/i, /^(?:cherry-pick(?=\\s|$))/i, /^(?:checkout(?=\\s|$))/i, /^(?:LR\\b)/i, /^(?:BT\\b)/i, /^(?::)/i, /^(?:\\^)/i, /^(?:options\\r?\\n)/i, /^(?:[ \\r\\n\\t]+end\\b)/i, /^(?:[\\s\\S]+(?=[ \\r\\n\\t]+end))/i, /^(?:["]["])/i, /^(?:["])/i, /^(?:["])/i, /^(?:[^"]*)/i, /^(?:[0-9]+(?=\\s|$))/i, /^(?:\\w([-\\./\\w]*[-\\w])?)/i, /^(?:$)/i, /^(?:\\s+)/i],\n      conditions: { "acc_descr_multiline": { "rules": [10, 11], "inclusive": false }, "acc_descr": { "rules": [8], "inclusive": false }, "acc_title": { "rules": [6], "inclusive": false }, "close_directive": { "rules": [], "inclusive": false }, "arg_directive": { "rules": [3, 4], "inclusive": false }, "type_directive": { "rules": [2, 3], "inclusive": false }, "open_directive": { "rules": [1], "inclusive": false }, "options": { "rules": [34, 35], "inclusive": false }, "string": { "rules": [38, 39], "inclusive": false }, "INITIAL": { "rules": [0, 5, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 42, 43], "inclusive": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst gitGraphParser = parser;\nlet mainBranchName = (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph.mainBranchName;\nlet mainBranchOrder = (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph.mainBranchOrder;\nlet commits = {};\nlet head = null;\nlet branchesConfig = {};\nbranchesConfig[mainBranchName] = { name: mainBranchName, order: mainBranchOrder };\nlet branches = {};\nbranches[mainBranchName] = head;\nlet curBranch = mainBranchName;\nlet direction = "LR";\nlet seq = 0;\nfunction getId() {\n  return (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.y)({ length: 7 });\n}\nconst parseDirective = function(statement, context, type) {\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.m.parseDirective(this, statement, context, type);\n};\nfunction uniqBy(list, fn) {\n  const recordMap = /* @__PURE__ */ Object.create(null);\n  return list.reduce((out, item) => {\n    const key = fn(item);\n    if (!recordMap[key]) {\n      recordMap[key] = true;\n      out.push(item);\n    }\n    return out;\n  }, []);\n}\nconst setDirection = function(dir) {\n  direction = dir;\n};\nlet options = {};\nconst setOptions = function(rawOptString) {\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug("options str", rawOptString);\n  rawOptString = rawOptString && rawOptString.trim();\n  rawOptString = rawOptString || "{}";\n  try {\n    options = JSON.parse(rawOptString);\n  } catch (e) {\n    _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.error("error while parsing gitGraph options", e.message);\n  }\n};\nconst getOptions = function() {\n  return options;\n};\nconst commit = function(msg, id, type, tag) {\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug("Entering commit:", msg, id, type, tag);\n  id = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(id, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  msg = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(msg, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  tag = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(tag, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  const commit2 = {\n    id: id ? id : seq + "-" + getId(),\n    message: msg,\n    seq: seq++,\n    type: type ? type : commitType$1.NORMAL,\n    tag: tag ? tag : "",\n    parents: head == null ? [] : [head.id],\n    branch: curBranch\n  };\n  head = commit2;\n  commits[commit2.id] = commit2;\n  branches[curBranch] = commit2.id;\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug("in pushCommit " + commit2.id);\n};\nconst branch = function(name, order) {\n  name = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(name, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  if (branches[name] === void 0) {\n    branches[name] = head != null ? head.id : null;\n    branchesConfig[name] = { name, order: order ? parseInt(order, 10) : null };\n    checkout(name);\n    _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug("in createBranch");\n  } else {\n    let error = new Error(\n      \'Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout \' + name + \'")\'\n    );\n    error.hash = {\n      text: "branch " + name,\n      token: "branch " + name,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\'"checkout \' + name + \'"\']\n    };\n    throw error;\n  }\n};\nconst merge = function(otherBranch, custom_id, override_type, custom_tag) {\n  otherBranch = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(otherBranch, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  custom_id = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(custom_id, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  const currentCommit = commits[branches[curBranch]];\n  const otherCommit = commits[branches[otherBranch]];\n  if (curBranch === otherBranch) {\n    let error = new Error(\'Incorrect usage of "merge". Cannot merge a branch to itself\');\n    error.hash = {\n      text: "merge " + otherBranch,\n      token: "merge " + otherBranch,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ["branch abc"]\n    };\n    throw error;\n  } else if (currentCommit === void 0 || !currentCommit) {\n    let error = new Error(\n      \'Incorrect usage of "merge". Current branch (\' + curBranch + ")has no commits"\n    );\n    error.hash = {\n      text: "merge " + otherBranch,\n      token: "merge " + otherBranch,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ["commit"]\n    };\n    throw error;\n  } else if (branches[otherBranch] === void 0) {\n    let error = new Error(\n      \'Incorrect usage of "merge". Branch to be merged (\' + otherBranch + ") does not exist"\n    );\n    error.hash = {\n      text: "merge " + otherBranch,\n      token: "merge " + otherBranch,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ["branch " + otherBranch]\n    };\n    throw error;\n  } else if (otherCommit === void 0 || !otherCommit) {\n    let error = new Error(\n      \'Incorrect usage of "merge". Branch to be merged (\' + otherBranch + ") has no commits"\n    );\n    error.hash = {\n      text: "merge " + otherBranch,\n      token: "merge " + otherBranch,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\'"commit"\']\n    };\n    throw error;\n  } else if (currentCommit === otherCommit) {\n    let error = new Error(\'Incorrect usage of "merge". Both branches have same head\');\n    error.hash = {\n      text: "merge " + otherBranch,\n      token: "merge " + otherBranch,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ["branch abc"]\n    };\n    throw error;\n  } else if (custom_id && commits[custom_id] !== void 0) {\n    let error = new Error(\n      \'Incorrect usage of "merge". Commit with id:\' + custom_id + " already exists, use different custom Id"\n    );\n    error.hash = {\n      text: "merge " + otherBranch + custom_id + override_type + custom_tag,\n      token: "merge " + otherBranch + custom_id + override_type + custom_tag,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\n        "merge " + otherBranch + " " + custom_id + "_UNIQUE " + override_type + " " + custom_tag\n      ]\n    };\n    throw error;\n  }\n  const commit2 = {\n    id: custom_id ? custom_id : seq + "-" + getId(),\n    message: "merged branch " + otherBranch + " into " + curBranch,\n    seq: seq++,\n    parents: [head == null ? null : head.id, branches[otherBranch]],\n    branch: curBranch,\n    type: commitType$1.MERGE,\n    customType: override_type,\n    customId: custom_id ? true : false,\n    tag: custom_tag ? custom_tag : ""\n  };\n  head = commit2;\n  commits[commit2.id] = commit2;\n  branches[curBranch] = commit2.id;\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(branches);\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug("in mergeBranch");\n};\nconst cherryPick = function(sourceId, targetId, tag) {\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug("Entering cherryPick:", sourceId, targetId, tag);\n  sourceId = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(sourceId, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  targetId = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(targetId, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  tag = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(tag, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  if (!sourceId || commits[sourceId] === void 0) {\n    let error = new Error(\n      \'Incorrect usage of "cherryPick". Source commit id should exist and provided\'\n    );\n    error.hash = {\n      text: "cherryPick " + sourceId + " " + targetId,\n      token: "cherryPick " + sourceId + " " + targetId,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ["cherry-pick abc"]\n    };\n    throw error;\n  }\n  let sourceCommit = commits[sourceId];\n  let sourceCommitBranch = sourceCommit.branch;\n  if (sourceCommit.type === commitType$1.MERGE) {\n    let error = new Error(\n      \'Incorrect usage of "cherryPick". Source commit should not be a merge commit\'\n    );\n    error.hash = {\n      text: "cherryPick " + sourceId + " " + targetId,\n      token: "cherryPick " + sourceId + " " + targetId,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ["cherry-pick abc"]\n    };\n    throw error;\n  }\n  if (!targetId || commits[targetId] === void 0) {\n    if (sourceCommitBranch === curBranch) {\n      let error = new Error(\n        \'Incorrect usage of "cherryPick". Source commit is already on current branch\'\n      );\n      error.hash = {\n        text: "cherryPick " + sourceId + " " + targetId,\n        token: "cherryPick " + sourceId + " " + targetId,\n        line: "1",\n        loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n        expected: ["cherry-pick abc"]\n      };\n      throw error;\n    }\n    const currentCommit = commits[branches[curBranch]];\n    if (currentCommit === void 0 || !currentCommit) {\n      let error = new Error(\n        \'Incorrect usage of "cherry-pick". Current branch (\' + curBranch + ")has no commits"\n      );\n      error.hash = {\n        text: "cherryPick " + sourceId + " " + targetId,\n        token: "cherryPick " + sourceId + " " + targetId,\n        line: "1",\n        loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n        expected: ["cherry-pick abc"]\n      };\n      throw error;\n    }\n    const commit2 = {\n      id: seq + "-" + getId(),\n      message: "cherry-picked " + sourceCommit + " into " + curBranch,\n      seq: seq++,\n      parents: [head == null ? null : head.id, sourceCommit.id],\n      branch: curBranch,\n      type: commitType$1.CHERRY_PICK,\n      tag: tag ?? "cherry-pick:" + sourceCommit.id\n    };\n    head = commit2;\n    commits[commit2.id] = commit2;\n    branches[curBranch] = commit2.id;\n    _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(branches);\n    _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug("in cherryPick");\n  }\n};\nconst checkout = function(branch2) {\n  branch2 = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(branch2, (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  if (branches[branch2] === void 0) {\n    let error = new Error(\n      \'Trying to checkout branch which is not yet created. (Help try using "branch \' + branch2 + \'")\'\n    );\n    error.hash = {\n      text: "checkout " + branch2,\n      token: "checkout " + branch2,\n      line: "1",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\'"branch \' + branch2 + \'"\']\n    };\n    throw error;\n  } else {\n    curBranch = branch2;\n    const id = branches[curBranch];\n    head = commits[id];\n  }\n};\nfunction upsert(arr, key, newVal) {\n  const index = arr.indexOf(key);\n  if (index === -1) {\n    arr.push(newVal);\n  } else {\n    arr.splice(index, 1, newVal);\n  }\n}\nfunction prettyPrintCommitHistory(commitArr) {\n  const commit2 = commitArr.reduce((out, commit3) => {\n    if (out.seq > commit3.seq) {\n      return out;\n    }\n    return commit3;\n  }, commitArr[0]);\n  let line = "";\n  commitArr.forEach(function(c) {\n    if (c === commit2) {\n      line += "\t*";\n    } else {\n      line += "\t|";\n    }\n  });\n  const label = [line, commit2.id, commit2.seq];\n  for (let branch2 in branches) {\n    if (branches[branch2] === commit2.id) {\n      label.push(branch2);\n    }\n  }\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(label.join(" "));\n  if (commit2.parents && commit2.parents.length == 2) {\n    const newCommit = commits[commit2.parents[0]];\n    upsert(commitArr, commit2, newCommit);\n    commitArr.push(commits[commit2.parents[1]]);\n  } else if (commit2.parents.length == 0) {\n    return;\n  } else {\n    const nextCommit = commits[commit2.parents];\n    upsert(commitArr, commit2, nextCommit);\n  }\n  commitArr = uniqBy(commitArr, (c) => c.id);\n  prettyPrintCommitHistory(commitArr);\n}\nconst prettyPrint = function() {\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(commits);\n  const node = getCommitsArray()[0];\n  prettyPrintCommitHistory([node]);\n};\nconst clear$1 = function() {\n  commits = {};\n  head = null;\n  let mainBranch = (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph.mainBranchName;\n  let mainBranchOrder2 = (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph.mainBranchOrder;\n  branches = {};\n  branches[mainBranch] = null;\n  branchesConfig = {};\n  branchesConfig[mainBranch] = { name: mainBranch, order: mainBranchOrder2 };\n  curBranch = mainBranch;\n  seq = 0;\n  (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.v)();\n};\nconst getBranchesAsObjArray = function() {\n  const branchesArray = Object.values(branchesConfig).map((branchConfig, i) => {\n    if (branchConfig.order !== null) {\n      return branchConfig;\n    }\n    return {\n      ...branchConfig,\n      order: parseFloat(`0.${i}`, 10)\n    };\n  }).sort((a, b) => a.order - b.order).map(({ name }) => ({ name }));\n  return branchesArray;\n};\nconst getBranches = function() {\n  return branches;\n};\nconst getCommits = function() {\n  return commits;\n};\nconst getCommitsArray = function() {\n  const commitArr = Object.keys(commits).map(function(key) {\n    return commits[key];\n  });\n  commitArr.forEach(function(o) {\n    _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(o.id);\n  });\n  commitArr.sort((a, b) => a.seq - b.seq);\n  return commitArr;\n};\nconst getCurrentBranch = function() {\n  return curBranch;\n};\nconst getDirection = function() {\n  return direction;\n};\nconst getHead = function() {\n  return head;\n};\nconst commitType$1 = {\n  NORMAL: 0,\n  REVERSE: 1,\n  HIGHLIGHT: 2,\n  MERGE: 3,\n  CHERRY_PICK: 4\n};\nconst gitGraphDb = {\n  parseDirective,\n  getConfig: () => (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph,\n  setDirection,\n  setOptions,\n  getOptions,\n  commit,\n  branch,\n  merge,\n  cherryPick,\n  checkout,\n  //reset,\n  prettyPrint,\n  clear: clear$1,\n  getBranchesAsObjArray,\n  getBranches,\n  getCommits,\n  getCommitsArray,\n  getCurrentBranch,\n  getDirection,\n  getHead,\n  setAccTitle: _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.s,\n  getAccTitle: _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.g,\n  getAccDescription: _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.a,\n  setAccDescription: _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.b,\n  setDiagramTitle: _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.r,\n  getDiagramTitle: _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.t,\n  commitType: commitType$1\n};\nlet allCommitsDict = {};\nconst commitType = {\n  NORMAL: 0,\n  REVERSE: 1,\n  HIGHLIGHT: 2,\n  MERGE: 3,\n  CHERRY_PICK: 4\n};\nconst THEME_COLOR_LIMIT = 8;\nlet branchPos = {};\nlet commitPos = {};\nlet lanes = [];\nlet maxPos = 0;\nconst clear = () => {\n  branchPos = {};\n  commitPos = {};\n  allCommitsDict = {};\n  maxPos = 0;\n  lanes = [];\n};\nconst drawText = (txt) => {\n  const svgLabel = document.createElementNS("http://www.w3.org/2000/svg", "text");\n  let rows = [];\n  if (typeof txt === "string") {\n    rows = txt.split(/\\\\n|\\n|<br\\s*\\/?>/gi);\n  } else if (Array.isArray(txt)) {\n    rows = txt;\n  } else {\n    rows = [];\n  }\n  for (const row of rows) {\n    const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");\n    tspan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");\n    tspan.setAttribute("dy", "1em");\n    tspan.setAttribute("x", "0");\n    tspan.setAttribute("class", "row");\n    tspan.textContent = row.trim();\n    svgLabel.appendChild(tspan);\n  }\n  return svgLabel;\n};\nconst drawCommits = (svg, commits2, modifyGraph) => {\n  const gitGraphConfig = (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.z)().gitGraph;\n  const gBullets = svg.append("g").attr("class", "commit-bullets");\n  const gLabels = svg.append("g").attr("class", "commit-labels");\n  let pos = 0;\n  const keys = Object.keys(commits2);\n  const sortedKeys = keys.sort((a, b) => {\n    return commits2[a].seq - commits2[b].seq;\n  });\n  sortedKeys.forEach((key) => {\n    const commit2 = commits2[key];\n    const y = branchPos[commit2.branch].pos;\n    const x = pos + 10;\n    if (modifyGraph) {\n      let typeClass;\n      let commitSymbolType = commit2.customType !== void 0 && commit2.customType !== "" ? commit2.customType : commit2.type;\n      switch (commitSymbolType) {\n        case commitType.NORMAL:\n          typeClass = "commit-normal";\n          break;\n        case commitType.REVERSE:\n          typeClass = "commit-reverse";\n          break;\n        case commitType.HIGHLIGHT:\n          typeClass = "commit-highlight";\n          break;\n        case commitType.MERGE:\n          typeClass = "commit-merge";\n          break;\n        case commitType.CHERRY_PICK:\n          typeClass = "commit-cherry-pick";\n          break;\n        default:\n          typeClass = "commit-normal";\n      }\n      if (commitSymbolType === commitType.HIGHLIGHT) {\n        const circle = gBullets.append("rect");\n        circle.attr("x", x - 10);\n        circle.attr("y", y - 10);\n        circle.attr("height", 20);\n        circle.attr("width", 20);\n        circle.attr(\n          "class",\n          `commit ${commit2.id} commit-highlight${branchPos[commit2.branch].index % THEME_COLOR_LIMIT} ${typeClass}-outer`\n        );\n        gBullets.append("rect").attr("x", x - 6).attr("y", y - 6).attr("height", 12).attr("width", 12).attr(\n          "class",\n          `commit ${commit2.id} commit${branchPos[commit2.branch].index % THEME_COLOR_LIMIT} ${typeClass}-inner`\n        );\n      } else if (commitSymbolType === commitType.CHERRY_PICK) {\n        gBullets.append("circle").attr("cx", x).attr("cy", y).attr("r", 10).attr("class", `commit ${commit2.id} ${typeClass}`);\n        gBullets.append("circle").attr("cx", x - 3).attr("cy", y + 2).attr("r", 2.75).attr("fill", "#fff").attr("class", `commit ${commit2.id} ${typeClass}`);\n        gBullets.append("circle").attr("cx", x + 3).attr("cy", y + 2).attr("r", 2.75).attr("fill", "#fff").attr("class", `commit ${commit2.id} ${typeClass}`);\n        gBullets.append("line").attr("x1", x + 3).attr("y1", y + 1).attr("x2", x).attr("y2", y - 5).attr("stroke", "#fff").attr("class", `commit ${commit2.id} ${typeClass}`);\n        gBullets.append("line").attr("x1", x - 3).attr("y1", y + 1).attr("x2", x).attr("y2", y - 5).attr("stroke", "#fff").attr("class", `commit ${commit2.id} ${typeClass}`);\n      } else {\n        const circle = gBullets.append("circle");\n        circle.attr("cx", x);\n        circle.attr("cy", y);\n        circle.attr("r", commit2.type === commitType.MERGE ? 9 : 10);\n        circle.attr(\n          "class",\n          `commit ${commit2.id} commit${branchPos[commit2.branch].index % THEME_COLOR_LIMIT}`\n        );\n        if (commitSymbolType === commitType.MERGE) {\n          const circle2 = gBullets.append("circle");\n          circle2.attr("cx", x);\n          circle2.attr("cy", y);\n          circle2.attr("r", 6);\n          circle2.attr(\n            "class",\n            `commit ${typeClass} ${commit2.id} commit${branchPos[commit2.branch].index % THEME_COLOR_LIMIT}`\n          );\n        }\n        if (commitSymbolType === commitType.REVERSE) {\n          const cross = gBullets.append("path");\n          cross.attr("d", `M ${x - 5},${y - 5}L${x + 5},${y + 5}M${x - 5},${y + 5}L${x + 5},${y - 5}`).attr(\n            "class",\n            `commit ${typeClass} ${commit2.id} commit${branchPos[commit2.branch].index % THEME_COLOR_LIMIT}`\n          );\n        }\n      }\n    }\n    commitPos[commit2.id] = { x: pos + 10, y };\n    if (modifyGraph) {\n      const px = 4;\n      const py = 2;\n      if (commit2.type !== commitType.CHERRY_PICK && (commit2.customId && commit2.type === commitType.MERGE || commit2.type !== commitType.MERGE) && gitGraphConfig.showCommitLabel) {\n        const wrapper = gLabels.append("g");\n        const labelBkg = wrapper.insert("rect").attr("class", "commit-label-bkg");\n        const text = wrapper.append("text").attr("x", pos).attr("y", y + 25).attr("class", "commit-label").text(commit2.id);\n        let bbox = text.node().getBBox();\n        labelBkg.attr("x", pos + 10 - bbox.width / 2 - py).attr("y", y + 13.5).attr("width", bbox.width + 2 * py).attr("height", bbox.height + 2 * py);\n        text.attr("x", pos + 10 - bbox.width / 2);\n        if (gitGraphConfig.rotateCommitLabel) {\n          let r_x = -7.5 - (bbox.width + 10) / 25 * 9.5;\n          let r_y = 10 + bbox.width / 25 * 8.5;\n          wrapper.attr(\n            "transform",\n            "translate(" + r_x + ", " + r_y + ") rotate(-45, " + pos + ", " + y + ")"\n          );\n        }\n      }\n      if (commit2.tag) {\n        const rect = gLabels.insert("polygon");\n        const hole = gLabels.append("circle");\n        const tag = gLabels.append("text").attr("y", y - 16).attr("class", "tag-label").text(commit2.tag);\n        let tagBbox = tag.node().getBBox();\n        tag.attr("x", pos + 10 - tagBbox.width / 2);\n        const h2 = tagBbox.height / 2;\n        const ly = y - 19.2;\n        rect.attr("class", "tag-label-bkg").attr(\n          "points",\n          `\n          ${pos - tagBbox.width / 2 - px / 2},${ly + py}\n          ${pos - tagBbox.width / 2 - px / 2},${ly - py}\n          ${pos + 10 - tagBbox.width / 2 - px},${ly - h2 - py}\n          ${pos + 10 + tagBbox.width / 2 + px},${ly - h2 - py}\n          ${pos + 10 + tagBbox.width / 2 + px},${ly + h2 + py}\n          ${pos + 10 - tagBbox.width / 2 - px},${ly + h2 + py}`\n        );\n        hole.attr("cx", pos - tagBbox.width / 2 + px / 2).attr("cy", ly).attr("r", 1.5).attr("class", "tag-hole");\n      }\n    }\n    pos += 50;\n    if (pos > maxPos) {\n      maxPos = pos;\n    }\n  });\n};\nconst hasOverlappingCommits = (commit1, commit2, allCommits) => {\n  const keys = Object.keys(allCommits);\n  const overlappingComits = keys.filter((key) => {\n    return allCommits[key].branch === commit2.branch && allCommits[key].seq > commit1.seq && allCommits[key].seq < commit2.seq;\n  });\n  return overlappingComits.length > 0;\n};\nconst findLane = (y1, y2, depth = 0) => {\n  const candidate = y1 + Math.abs(y1 - y2) / 2;\n  if (depth > 5) {\n    return candidate;\n  }\n  let ok = lanes.every((lane) => Math.abs(lane - candidate) >= 10);\n  if (ok) {\n    lanes.push(candidate);\n    return candidate;\n  }\n  const diff = Math.abs(y1 - y2);\n  return findLane(y1, y2 - diff / 5, depth + 1);\n};\nconst drawArrow = (svg, commit1, commit2, allCommits) => {\n  const p1 = commitPos[commit1.id];\n  const p2 = commitPos[commit2.id];\n  const overlappingCommits = hasOverlappingCommits(commit1, commit2, allCommits);\n  let arc = "";\n  let arc2 = "";\n  let radius = 0;\n  let offset = 0;\n  let colorClassNum = branchPos[commit2.branch].index;\n  let lineDef;\n  if (overlappingCommits) {\n    arc = "A 10 10, 0, 0, 0,";\n    arc2 = "A 10 10, 0, 0, 1,";\n    radius = 10;\n    offset = 10;\n    colorClassNum = branchPos[commit2.branch].index;\n    const lineY = p1.y < p2.y ? findLane(p1.y, p2.y) : findLane(p2.y, p1.y);\n    if (p1.y < p2.y) {\n      lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${lineY - radius} ${arc} ${p1.x + offset} ${lineY} L ${p2.x - radius} ${lineY} ${arc2} ${p2.x} ${lineY + offset} L ${p2.x} ${p2.y}`;\n    } else {\n      lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${lineY + radius} ${arc2} ${p1.x + offset} ${lineY} L ${p2.x - radius} ${lineY} ${arc} ${p2.x} ${lineY - offset} L ${p2.x} ${p2.y}`;\n    }\n  } else {\n    if (p1.y < p2.y) {\n      arc = "A 20 20, 0, 0, 0,";\n      radius = 20;\n      offset = 20;\n      colorClassNum = branchPos[commit2.branch].index;\n      lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n    }\n    if (p1.y > p2.y) {\n      arc = "A 20 20, 0, 0, 0,";\n      radius = 20;\n      offset = 20;\n      colorClassNum = branchPos[commit1.branch].index;\n      lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc} ${p2.x} ${p1.y - offset} L ${p2.x} ${p2.y}`;\n    }\n    if (p1.y === p2.y) {\n      colorClassNum = branchPos[commit1.branch].index;\n      lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n    }\n  }\n  svg.append("path").attr("d", lineDef).attr("class", "arrow arrow" + colorClassNum % THEME_COLOR_LIMIT);\n};\nconst drawArrows = (svg, commits2) => {\n  const gArrows = svg.append("g").attr("class", "commit-arrows");\n  Object.keys(commits2).forEach((key) => {\n    const commit2 = commits2[key];\n    if (commit2.parents && commit2.parents.length > 0) {\n      commit2.parents.forEach((parent) => {\n        drawArrow(gArrows, commits2[parent], commit2, commits2);\n      });\n    }\n  });\n};\nconst drawBranches = (svg, branches2) => {\n  const gitGraphConfig = (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.z)().gitGraph;\n  const g = svg.append("g");\n  branches2.forEach((branch2, index) => {\n    const adjustIndexForTheme = index % THEME_COLOR_LIMIT;\n    const pos = branchPos[branch2.name].pos;\n    const line = g.append("line");\n    line.attr("x1", 0);\n    line.attr("y1", pos);\n    line.attr("x2", maxPos);\n    line.attr("y2", pos);\n    line.attr("class", "branch branch" + adjustIndexForTheme);\n    lanes.push(pos);\n    let name = branch2.name;\n    const labelElement = drawText(name);\n    const bkg = g.insert("rect");\n    const branchLabel = g.insert("g").attr("class", "branchLabel");\n    const label = branchLabel.insert("g").attr("class", "label branch-label" + adjustIndexForTheme);\n    label.node().appendChild(labelElement);\n    let bbox = labelElement.getBBox();\n    bkg.attr("class", "branchLabelBkg label" + adjustIndexForTheme).attr("rx", 4).attr("ry", 4).attr("x", -bbox.width - 4 - (gitGraphConfig.rotateCommitLabel === true ? 30 : 0)).attr("y", -bbox.height / 2 + 8).attr("width", bbox.width + 18).attr("height", bbox.height + 4);\n    label.attr(\n      "transform",\n      "translate(" + (-bbox.width - 14 - (gitGraphConfig.rotateCommitLabel === true ? 30 : 0)) + ", " + (pos - bbox.height / 2 - 1) + ")"\n    );\n    bkg.attr("transform", "translate(-19, " + (pos - bbox.height / 2) + ")");\n  });\n};\nconst draw = function(txt, id, ver, diagObj) {\n  clear();\n  const conf = (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.z)();\n  const gitGraphConfig = conf.gitGraph;\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.l.debug("in gitgraph renderer", txt + "\\n", "id:", id, ver);\n  allCommitsDict = diagObj.db.getCommits();\n  const branches2 = diagObj.db.getBranchesAsObjArray();\n  let pos = 0;\n  branches2.forEach((branch2, index) => {\n    branchPos[branch2.name] = { pos, index };\n    pos += 50 + (gitGraphConfig.rotateCommitLabel ? 40 : 0);\n  });\n  const diagram2 = (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(`[id="${id}"]`);\n  drawCommits(diagram2, allCommitsDict, false);\n  if (gitGraphConfig.showBranches) {\n    drawBranches(diagram2, branches2);\n  }\n  drawArrows(diagram2, allCommitsDict);\n  drawCommits(diagram2, allCommitsDict, true);\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.u.insertTitle(\n    diagram2,\n    "gitTitleText",\n    gitGraphConfig.titleTopMargin,\n    diagObj.db.getDiagramTitle()\n  );\n  (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_5__.A)(\n    void 0,\n    diagram2,\n    gitGraphConfig.diagramPadding,\n    gitGraphConfig.useMaxWidth ?? conf.useMaxWidth\n  );\n};\nconst gitGraphRenderer = {\n  draw\n};\nconst getStyles = (options2) => `\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: \'trebuchet ms\', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0, 1, 2, 3, 4, 5, 6, 7].map(\n  (i) => `\n        .branch-label${i} { fill: ${options2["gitBranchLabel" + i]}; }\n        .commit${i} { stroke: ${options2["git" + i]}; fill: ${options2["git" + i]}; }\n        .commit-highlight${i} { stroke: ${options2["gitInv" + i]}; fill: ${options2["gitInv" + i]}; }\n        .label${i}  { fill: ${options2["git" + i]}; }\n        .arrow${i} { stroke: ${options2["git" + i]}; }\n        `\n).join("\\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${options2.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${options2.commitLabelFontSize}; fill: ${options2.commitLabelColor};}\n  .commit-label-bkg { font-size: ${options2.commitLabelFontSize}; fill: ${options2.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${options2.tagLabelFontSize}; fill: ${options2.tagLabelColor};}\n  .tag-label-bkg { fill: ${options2.tagLabelBackground}; stroke: ${options2.tagLabelBorder}; }\n  .tag-hole { fill: ${options2.textColor}; }\n\n  .commit-merge {\n    stroke: ${options2.primaryColor};\n    fill: ${options2.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${options2.primaryColor};\n    fill: ${options2.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${options2.primaryColor};\n    fill: ${options2.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options2.textColor};\n  }\n`;\nconst gitGraphStyles = getStyles;\nconst diagram = {\n  parser: gitGraphParser,\n  db: gitGraphDb,\n  renderer: gitGraphRenderer,\n  styles: gitGraphStyles\n};\n\n\n\n//# sourceURL=webpack://frontend/./node_modules/mermaid/dist/gitGraphDiagram-1e960c50.js?')}}]);