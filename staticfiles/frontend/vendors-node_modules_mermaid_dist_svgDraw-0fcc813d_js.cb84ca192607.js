/*! For license information please see vendors-node_modules_mermaid_dist_svgDraw-0fcc813d_js.js.LICENSE.txt */
"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([["vendors-node_modules_mermaid_dist_svgDraw-0fcc813d_js"],{"./node_modules/mermaid/dist/svgDraw-0fcc813d.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   p: () => (/* binding */ parseMember),\n/* harmony export */   s: () => (/* binding */ svgDraw)\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/mermaid/node_modules/d3/src/index.js");\n/* harmony import */ var _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mermaid-b0ad2de1.js */ "./node_modules/mermaid/dist/mermaid-b0ad2de1.js");\n\n\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation, conf, diagObj) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case diagObj.db.relationType.AGGREGATION:\n        return "aggregation";\n      case diagObj.db.relationType.EXTENSION:\n        return "extension";\n      case diagObj.db.relationType.COMPOSITION:\n        return "composition";\n      case diagObj.db.relationType.DEPENDENCY:\n        return "dependency";\n      case diagObj.db.relationType.LOLLIPOP:\n        return "lollipop";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = (0,d3__WEBPACK_IMPORTED_MODULE_0__.line)().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(d3__WEBPACK_IMPORTED_MODULE_0__.curveBasis);\n  const svgPath = elem.append("path").attr("d", lineFunction(lineData)).attr("id", "edge" + edgeCount).attr("class", "relation");\n  let url = "";\n  if (conf.arrowMarkerAbsolute) {\n    url = window.location.protocol + "//" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, "\\\\(");\n    url = url.replace(/\\)/g, "\\\\)");\n  }\n  if (relation.relation.lineType == 1) {\n    svgPath.attr("class", "relation dashed-line");\n  }\n  if (relation.relation.lineType == 10) {\n    svgPath.attr("class", "relation dotted-line");\n  }\n  if (relation.relation.type1 !== "none") {\n    svgPath.attr(\n      "marker-start",\n      "url(" + url + "#" + getRelationType(relation.relation.type1) + "Start)"\n    );\n  }\n  if (relation.relation.type2 !== "none") {\n    svgPath.attr(\n      "marker-end",\n      "url(" + url + "#" + getRelationType(relation.relation.type2) + "End)"\n    );\n  }\n  let x, y;\n  const l = path.points.length;\n  let labelPosition = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.u.calcLabelPosition(path.points);\n  x = labelPosition.x;\n  y = labelPosition.y;\n  let p1_card_x, p1_card_y;\n  let p2_card_x, p2_card_y;\n  if (l % 2 !== 0 && l > 1) {\n    let cardinality_1_point = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.u.calcCardinalityPosition(\n      relation.relation.type1 !== "none",\n      path.points,\n      path.points[0]\n    );\n    let cardinality_2_point = _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.u.calcCardinalityPosition(\n      relation.relation.type2 !== "none",\n      path.points,\n      path.points[l - 1]\n    );\n    _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.l.debug("cardinality_1_point " + JSON.stringify(cardinality_1_point));\n    _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.l.debug("cardinality_2_point " + JSON.stringify(cardinality_2_point));\n    p1_card_x = cardinality_1_point.x;\n    p1_card_y = cardinality_1_point.y;\n    p2_card_x = cardinality_2_point.x;\n    p2_card_y = cardinality_2_point.y;\n  }\n  if (relation.title !== void 0) {\n    const g = elem.append("g").attr("class", "classLabel");\n    const label = g.append("text").attr("class", "label").attr("x", x).attr("y", y).attr("fill", "red").attr("text-anchor", "middle").text(relation.title);\n    window.label = label;\n    const bounds = label.node().getBBox();\n    g.insert("rect", ":first-child").attr("class", "box").attr("x", bounds.x - conf.padding / 2).attr("y", bounds.y - conf.padding / 2).attr("width", bounds.width + conf.padding).attr("height", bounds.height + conf.padding);\n  }\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.l.info("Rendering relation " + JSON.stringify(relation));\n  if (relation.relationTitle1 !== void 0 && relation.relationTitle1 !== "none") {\n    const g = elem.append("g").attr("class", "cardinality");\n    g.append("text").attr("class", "type1").attr("x", p1_card_x).attr("y", p1_card_y).attr("fill", "black").attr("font-size", "6").text(relation.relationTitle1);\n  }\n  if (relation.relationTitle2 !== void 0 && relation.relationTitle2 !== "none") {\n    const g = elem.append("g").attr("class", "cardinality");\n    g.append("text").attr("class", "type2").attr("x", p2_card_x).attr("y", p2_card_y).attr("fill", "black").attr("font-size", "6").text(relation.relationTitle2);\n  }\n  edgeCount++;\n};\nconst drawClass = function(elem, classDef, conf, diagObj) {\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.l.debug("Rendering class ", classDef, conf);\n  const id = classDef.id;\n  const classInfo = {\n    id,\n    label: classDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append("g").attr("id", diagObj.db.lookUpDomId(id)).attr("class", "classGroup");\n  let title;\n  if (classDef.link) {\n    title = g.append("svg:a").attr("xlink:href", classDef.link).attr("target", classDef.linkTarget).append("text").attr("y", conf.textHeight + conf.padding).attr("x", 0);\n  } else {\n    title = g.append("text").attr("y", conf.textHeight + conf.padding).attr("x", 0);\n  }\n  let isFirst = true;\n  classDef.annotations.forEach(function(member) {\n    const titleText2 = title.append("tspan").text("«" + member + "»");\n    if (!isFirst) {\n      titleText2.attr("dy", conf.textHeight);\n    }\n    isFirst = false;\n  });\n  let classTitleString = getClassTitleString(classDef);\n  const classTitle = title.append("tspan").text(classTitleString).attr("class", "title");\n  if (!isFirst) {\n    classTitle.attr("dy", conf.textHeight);\n  }\n  const titleHeight = title.node().getBBox().height;\n  const membersLine = g.append("line").attr("x1", 0).attr("y1", conf.padding + titleHeight + conf.dividerMargin / 2).attr("y2", conf.padding + titleHeight + conf.dividerMargin / 2);\n  const members = g.append("text").attr("x", conf.padding).attr("y", titleHeight + conf.dividerMargin + conf.textHeight).attr("fill", "white").attr("class", "classText");\n  isFirst = true;\n  classDef.members.forEach(function(member) {\n    addTspan(members, member, isFirst, conf);\n    isFirst = false;\n  });\n  const membersBox = members.node().getBBox();\n  const methodsLine = g.append("line").attr("x1", 0).attr("y1", conf.padding + titleHeight + conf.dividerMargin + membersBox.height).attr("y2", conf.padding + titleHeight + conf.dividerMargin + membersBox.height);\n  const methods = g.append("text").attr("x", conf.padding).attr("y", titleHeight + 2 * conf.dividerMargin + membersBox.height + conf.textHeight).attr("fill", "white").attr("class", "classText");\n  isFirst = true;\n  classDef.methods.forEach(function(method) {\n    addTspan(methods, method, isFirst, conf);\n    isFirst = false;\n  });\n  const classBox = g.node().getBBox();\n  var cssClassStr = " ";\n  if (classDef.cssClasses.length > 0) {\n    cssClassStr = cssClassStr + classDef.cssClasses.join(" ");\n  }\n  const rect = g.insert("rect", ":first-child").attr("x", 0).attr("y", 0).attr("width", classBox.width + 2 * conf.padding).attr("height", classBox.height + conf.padding + 0.5 * conf.dividerMargin).attr("class", cssClassStr);\n  const rectWidth = rect.node().getBBox().width;\n  title.node().childNodes.forEach(function(x) {\n    x.setAttribute("x", (rectWidth - x.getBBox().width) / 2);\n  });\n  if (classDef.tooltip) {\n    title.insert("title").text(classDef.tooltip);\n  }\n  membersLine.attr("x2", rectWidth);\n  methodsLine.attr("x2", rectWidth);\n  classInfo.width = rectWidth;\n  classInfo.height = classBox.height + conf.padding + 0.5 * conf.dividerMargin;\n  return classInfo;\n};\nconst getClassTitleString = function(classDef) {\n  let classTitleString = classDef.id;\n  if (classDef.type) {\n    classTitleString += "<" + classDef.type + ">";\n  }\n  return classTitleString;\n};\nconst drawNote = function(elem, note, conf, diagObj) {\n  _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.l.debug("Rendering note ", note, conf);\n  const id = note.id;\n  const noteInfo = {\n    id,\n    text: note.text,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append("g").attr("id", id).attr("class", "classGroup");\n  let text = g.append("text").attr("y", conf.textHeight + conf.padding).attr("x", 0);\n  const lines = JSON.parse(`"${note.text}"`).split("\\n");\n  lines.forEach(function(line2) {\n    _mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.l.debug(`Adding line: ${line2}`);\n    text.append("tspan").text(line2).attr("class", "title").attr("dy", conf.textHeight);\n  });\n  const noteBox = g.node().getBBox();\n  const rect = g.insert("rect", ":first-child").attr("x", 0).attr("y", 0).attr("width", noteBox.width + 2 * conf.padding).attr(\n    "height",\n    noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin\n  );\n  const rectWidth = rect.node().getBBox().width;\n  text.node().childNodes.forEach(function(x) {\n    x.setAttribute("x", (rectWidth - x.getBBox().width) / 2);\n  });\n  noteInfo.width = rectWidth;\n  noteInfo.height = noteBox.height + lines.length * conf.textHeight + conf.padding + 0.5 * conf.dividerMargin;\n  return noteInfo;\n};\nconst parseMember = function(text) {\n  let displayText = "";\n  let cssStyle = "";\n  let returnType = "";\n  let visibility = "";\n  let firstChar = text.substring(0, 1);\n  let lastChar = text.substring(text.length - 1, text.length);\n  if (firstChar.match(/[#+~-]/)) {\n    visibility = firstChar;\n  }\n  let noClassifierRe = /[\\s\\w)~]/;\n  if (!lastChar.match(noClassifierRe)) {\n    cssStyle = parseClassifier(lastChar);\n  }\n  const startIndex = visibility === "" ? 0 : 1;\n  let endIndex = cssStyle === "" ? text.length : text.length - 1;\n  text = text.substring(startIndex, endIndex);\n  const methodStart = text.indexOf("(");\n  const methodEnd = text.indexOf(")");\n  const isMethod = methodStart > 1 && methodEnd > methodStart && methodEnd <= text.length;\n  if (isMethod) {\n    let methodName = text.substring(0, methodStart).trim();\n    const parameters = text.substring(methodStart + 1, methodEnd);\n    displayText = visibility + methodName + "(" + (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.x)(parameters.trim()) + ")";\n    if (methodEnd < text.length) {\n      let potentialClassifier = text.substring(methodEnd + 1, methodEnd + 2);\n      if (cssStyle === "" && !potentialClassifier.match(noClassifierRe)) {\n        cssStyle = parseClassifier(potentialClassifier);\n        returnType = text.substring(methodEnd + 2).trim();\n      } else {\n        returnType = text.substring(methodEnd + 1).trim();\n      }\n      if (returnType !== "") {\n        if (returnType.charAt(0) === ":") {\n          returnType = returnType.substring(1).trim();\n        }\n        returnType = " : " + (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.x)(returnType);\n        displayText += returnType;\n      }\n    }\n  } else {\n    displayText = visibility + (0,_mermaid_b0ad2de1_js__WEBPACK_IMPORTED_MODULE_1__.x)(text);\n  }\n  return {\n    displayText,\n    cssStyle\n  };\n};\nconst addTspan = function(textEl, txt, isFirst, conf) {\n  let member = parseMember(txt);\n  const tSpan = textEl.append("tspan").attr("x", conf.padding).text(member.displayText);\n  if (member.cssStyle !== "") {\n    tSpan.attr("style", member.cssStyle);\n  }\n  if (!isFirst) {\n    tSpan.attr("dy", conf.textHeight);\n  }\n};\nconst parseClassifier = function(classifier) {\n  switch (classifier) {\n    case "*":\n      return "font-style:italic;";\n    case "$":\n      return "text-decoration:underline;";\n    default:\n      return "";\n  }\n};\nconst svgDraw = {\n  getClassTitleString,\n  drawClass,\n  drawEdge,\n  drawNote,\n  parseMember\n};\n\n\n\n//# sourceURL=webpack://frontend/./node_modules/mermaid/dist/svgDraw-0fcc813d.js?')}}]);